#pragma once


#include <wxpex/collapsible.h>
#include <wxpex/labeled_widget.h>
#include <wxpex/slider.h>
#include <wxpex/button.h>
#include <wxpex/check_box.h>

#include <draw/views/node_settings_view.h>
#include <iris/level_settings.h>
#include <iris/views/detect_settings_view.h>


namespace iris
{


template<typename Value>
class LevelSettingsView: public draw::CollapsibleNodeSettingsView
{
public:
    using LayoutOptions = wxpex::LayoutOptions;

    LevelSettingsView(
        wxWindow *parent,
        const std::string &name,
        LevelControl<Value> control,
        std::optional<draw::NodeSettingsControl> nodeSettingsControl,
        const LayoutOptions &layoutOptions = LayoutOptions{})
        :
        draw::CollapsibleNodeSettingsView(parent, name, nodeSettingsControl)
    {
        this->ConfigureSizer(this->MakeRangeSizer(control, layoutOptions));
    }

    LevelSettingsView(
        DetectTag,
        wxWindow *parent,
        const std::string &name,
        const LevelControl<Value> &control,
        std::optional<draw::NodeSettingsControl> nodeSettingsControl,
        const LayoutOptions &layoutOptions = LayoutOptions{})
        :
        draw::CollapsibleNodeSettingsView(parent, name, nodeSettingsControl)
    {
        auto detect = new DetectSettingsView(
            this->GetPanel(),
            control.autoDetectSettings);

        auto sizer = wxpex::LayoutItems(
            wxpex::verticalItems,
            detect,
            this->MakeRangeSizer(control, layoutOptions));

        this->ConfigureSizer(std::move(sizer));
    }

    std::unique<wxBoxSizer> MakeRangeSizer(
        const LevelControl<Value> &control,
        const LayoutOptions &layoutOptions)
    {
        auto enable = wxpex::LabeledWidget(
            this->GetPanel(),
            "enable",
            new wxpex::CheckBox(this->GetPanel(), "", control.enable));

        auto levelLow = wxpex::LabeledWidget(
            this->GetPanel(),
            "Low",
            new wxpex::ValueSlider(
                this->GetPanel(),
                control.range.low,
                control.range.low.value));

        auto levelHigh = wxpex::LabeledWidget(
            this->GetPanel(),
            "High",
            new wxpex::ValueSlider(
                this->GetPanel(),
                control.range.high,
                control.range.high.value));

        return wxpex::LayoutLabeled(
            layoutOptions,
            enable,
            levelLow,
            levelHigh);
    }
};


extern template class LevelSettingsView<int32_t>;


} // end namespace iris
